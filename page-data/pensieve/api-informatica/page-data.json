{"componentChunkName":"component---src-templates-post-js","path":"/pensieve/api-informatica","result":{"data":{"markdownRemark":{"html":"<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 700px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/b102d73f84e0df61ca5c811cb2d4e440/65657/api_architecture.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 53.714285714285715%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'216\\'%20viewBox=\\'0%200%20400%20216\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M3%20109v102h66V6H3v103m120-73v9h16v12h-20l-20%201h41V46l8-1h8V27l-1%208v9h-31v-9l-1-8v9m39%200v9l1-9v-8h27v16h-14c-10%200-12%200-7%201l7%201v15h-21l-21%201h42v29h-10V66h-64v19c0%2017%200%2019-2%2019v1c2%200%202%201%202%206v6h64v-12h8l8-1h-16V92h11V62h29l30-1h-59v-7l1-6%2011-1%2011-1h-11c-10%200-10%200-5-1h7V27h-29v9m67%2038h46v58h-46l-45%201h92V73h-92l45%201M108%2094v16h52V79l-26-1h-26v16m82-9l-1%203-2%201h2l1%203v3h24l25-1c2%200%202-2%202-6v-5h-51v2m24%203v3h23v-6h-23v3m16%2010l-20%201c-21%200-21%200-21%208v5h77V99h-17l-18-1h-1m-21%208v3h28v-7h-28v4m30%200v3h21v-7h-21v4m139%203h18v24h-18c-10%200-14%201-9%201%207%200%209%200%209%202l1%201%201-1c0-2%202-2%209-2h8v-26h-36l17%201m-169%208l-1%207v6h63v-15h-31c-27%200-31%200-31%202m19%206v4h19v-9h-19v5m20%200v4h18v-9h-18v5m-92%2037l-30%201-1%206v7h84v-14h-53m-6%207v5h48v-9l-24-1h-24v5m113%2029l-1%204v2l1%204v3h52v-16h-52v3m1%205v7h50v-14h-50v7\\'%20fill=\\'%2364ffda\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"API Architecture\"\n        title=\"architecture\"\n        src=\"/static/b102d73f84e0df61ca5c811cb2d4e440/39600/api_architecture.png\"\n        srcset=\"/static/b102d73f84e0df61ca5c811cb2d4e440/1aaec/api_architecture.png 175w,\n/static/b102d73f84e0df61ca5c811cb2d4e440/98287/api_architecture.png 350w,\n/static/b102d73f84e0df61ca5c811cb2d4e440/39600/api_architecture.png 700w,\n/static/b102d73f84e0df61ca5c811cb2d4e440/57cd1/api_architecture.png 1050w,\n/static/b102d73f84e0df61ca5c811cb2d4e440/65657/api_architecture.png 1339w\"\n        sizes=\"(max-width: 700px) 100vw, 700px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>Api heberge sur 2 zone de securite different, c'est pour ca, nous avons 2 workers qui vont deployer differenement, un sur docker et un autre sur la VM Cloud (qui necessite d'avoir l'ouverture de route sur GBIS)</p>\n<p>Api a ete developpe par Python version 3.6 en utilisant des libraries: <code class=\"language-text\">requirements.txt</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">flask-restplus==0.11.0\npytest==3.8.2\npytest-mock==1.10.0\nfaker==0.9.0\nredis==3.2.0\ncelery==4.3.0\nflower==0.9.2\nansible==2.7.4\ngunicorn==19.9.0\nsg-cacert-file==2.0.2</code></pre></div>\n<p>Structuration du projet:\n.</p>\n<ul>\n<li>ETLaaS_GCR_async\n<ul>\n<li>app\n<ul>\n<li>ansible\n<ul>\n<li>inventory</li>\n<li>playbook</li>\n</ul>\n</li>\n<li>apis\n<ul>\n<li>authentication.py</li>\n<li>grchost.py</li>\n<li>health_check.py</li>\n<li>informatica.py</li>\n<li>jobs.py</li>\n<li>uuid.py</li>\n</ul>\n</li>\n<li>config</li>\n<li>core\n<ul>\n<li>actions.py</li>\n<li>cloud_permission.py</li>\n<li>utils.py</li>\n<li>exception.py</li>\n<li>decorators.py</li>\n<li>killsession.py</li>\n</ul>\n</li>\n<li>tasks\n<ul>\n<li>add.py</li>\n<li>find_command.py</li>\n<li>list_repository.py</li>\n</ul>\n</li>\n<li>tests\n<ul>\n<li>mock_classes.py</li>\n<li>test_calc.py</li>\n<li>test_cases.py</li>\n<li>test_version.py</li>\n</ul>\n</li>\n<li><strong>init</strong>.py</li>\n</ul>\n</li>\n<li>config\n<ul>\n<li>GCR.csv</li>\n<li>IFARCRSERVER.csv</li>\n<li>default.py</li>\n<li>gunicorn_conf.py</li>\n<li>sg_datalake.cfg</li>\n</ul>\n</li>\n<li>dockers\n<ul>\n<li>app</li>\n<li>celery</li>\n<li>flower</li>\n<li>redis</li>\n</ul>\n</li>\n<li>kube\n<ul>\n<li>deployment.yml</li>\n<li>service.yml</li>\n<li>ingress.yml</li>\n<li>secret-env.yml</li>\n</ul>\n</li>\n<li>run\n<ul>\n<li>dev-env.sh</li>\n<li>prd-env.sh</li>\n</ul>\n</li>\n<li>ssl</li>\n<li>swagger</li>\n</ul>\n</li>\n</ul>\n<h2>APIs</h2>\n<p>This APIs utilise asynchro technique pour recuperer le resultat sur les task qui dure longtemps en generale, une fois le job a ete submit sur APIs, les playbooks ansible vont jouer des commandlines sur des servers specifiques, ca va prendre de deux a 5 minutes, ca depends la bande passante du reseau.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#UUID.py</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span>jsonify<span class=\"token punctuation\">,</span> g\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta\n<span class=\"token keyword\">from</span> flask_restplus <span class=\"token keyword\">import</span> Namespace<span class=\"token punctuation\">,</span> Resource<span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">,</span> marshal\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>cloud_permission <span class=\"token keyword\">import</span> check_cloud_permission\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> DecoratedResource\n<span class=\"token comment\">#from app.app_file import app, redis_cache</span>\n<span class=\"token comment\"># from flask_sg_datalake import DatalakeRecord</span>\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> transaction_correlation_id <span class=\"token keyword\">as</span> correlation_id\n<span class=\"token comment\">#import redis_cache</span>\n<span class=\"token keyword\">from</span> flask_sg_datalake <span class=\"token keyword\">import</span> DatalakeRecord\n<span class=\"token keyword\">import</span> logging\nnamespace <span class=\"token operator\">=</span> Namespace<span class=\"token punctuation\">(</span><span class=\"token string\">'UUID'</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">'Get async output here'</span><span class=\"token punctuation\">)</span>\ndl_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'datalake'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&lt;uuid>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Job</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Get the job\"\"\"</span>\n\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"get your job result\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>app_file <span class=\"token keyword\">import</span> redis_cache\n        <span class=\"token keyword\">if</span> redis_cache<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            task_not_exist <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                               <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> uuid<span class=\"token punctuation\">,</span>\n                               <span class=\"token string\">\"details\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The task does not exist\"</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> task_not_exist<span class=\"token punctuation\">,</span> <span class=\"token number\">404</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> celery\n            return_celery_obj <span class=\"token operator\">=</span> celery<span class=\"token punctuation\">.</span>AsyncResult<span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">)</span>\n            default_result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                          <span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> return_celery_obj<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> return_celery_obj<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">\"details\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The task is being executed,may take longer than 2mins. please click on try it out again\"</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> return_celery_obj<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!=</span> <span class=\"token string\">\"PENDING\"</span><span class=\"token punctuation\">:</span>\n                redis_cache<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> return_celery_obj<span class=\"token punctuation\">.</span>ready<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                default_result<span class=\"token punctuation\">[</span><span class=\"token string\">\"details\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> return_celery_obj<span class=\"token punctuation\">.</span>result\n                g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                                                response_message<span class=\"token operator\">=</span>return_celery_obj<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> details<span class=\"token operator\">=</span>return_celery_obj<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> default_result<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                                                response_message<span class=\"token operator\">=</span>return_celery_obj<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                                                details<span class=\"token operator\">=</span>return_celery_obj<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> default_result<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span></code></pre></div>\n<p>Some examples of Api methods</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#informatica.py</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> jsonify<span class=\"token punctuation\">,</span> g\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta\n<span class=\"token keyword\">from</span> flask_restplus <span class=\"token keyword\">import</span> Namespace<span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">,</span> reqparse<span class=\"token punctuation\">,</span> marshal\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>apis<span class=\"token punctuation\">.</span>authentication <span class=\"token keyword\">import</span> parsetoken\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>cloud_permission <span class=\"token keyword\">import</span> check_cloud_permission\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>csvreader <span class=\"token keyword\">import</span> check_csvfile\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exception <span class=\"token keyword\">import</span> NoSuchResource<span class=\"token punctuation\">,</span> InvalidUsage\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> Resource<span class=\"token punctuation\">,</span>DecoratedResource\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>actions <span class=\"token keyword\">import</span> find_command<span class=\"token punctuation\">,</span> find_command_IS\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> json<span class=\"token punctuation\">,</span> os\n<span class=\"token keyword\">from</span> flask_sg_datalake <span class=\"token keyword\">import</span> DatalakeRecord\n<span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> transaction_correlation_id <span class=\"token keyword\">as</span> correlation_id\ndl_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">'datalake'</span><span class=\"token punctuation\">)</span>\n\nnamespace <span class=\"token operator\">=</span> Namespace<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"informatica\"</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">=</span><span class=\"token string\">\"Informatica Services\"</span><span class=\"token punctuation\">)</span>\n\ninstance_schema_in <span class=\"token operator\">=</span> namespace<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token string\">'Action'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"action\"</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span>\n        description<span class=\"token operator\">=</span><span class=\"token string\">\"Start/Stop\"</span><span class=\"token punctuation\">,</span>\n        required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ninstance_schema_out <span class=\"token operator\">=</span> namespace<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token string\">'Task'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'result'</span><span class=\"token punctuation\">:</span> fields<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'your task result'</span><span class=\"token punctuation\">,</span>\n                          required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nparser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"Domain name\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"Domain Host name\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"Environment\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"IS_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>errorhandler</span><span class=\"token punctuation\">(</span>InvalidUsage<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>errorhandler</span><span class=\"token punctuation\">(</span>NoSuchResource<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">handle_invalid_usage</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" Catch and forward to app.errorhandler InvalidUsage exceptions \"\"\"</span>\n    response <span class=\"token operator\">=</span> jsonify<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>to_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>status_code\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token comment\">#List IS</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/trigrams/&lt;trigram>/domains/&lt;domain_name>/integration-services/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain host name.Give SVCToolname ex: xxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your application environment ex: Development, Homologation, Production'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>security<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'oauth2_implicit'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'itaas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'openid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">list_Instance</span><span class=\"token punctuation\">(</span>DecoratedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Shows your IS status\"\"\"</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"This function will show your instance status.\\n\\r\"</span>\n                               <span class=\"token string\">\"Please input your respective information according to token.\\n\\r\"</span>\n                               <span class=\"token string\">\"This part should be changed with IAMaaS in the future.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid Usage - OAuth2.0 Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No Such Service\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Please verify the domain or contact ETL adm for update the domain list into api\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">,</span> domain_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"check your IS status.\n        This endpoint returns the Infrastructure Service(IS) list present in server.\n        Endpoint will return according to your token and your account.\n        ***The information need for json in the request:***\n        * trigram[required]:\n            your application trigram.Ex: MAE\n        * domain_name:\n            domain present in requested server.Ex: AAA_XXX_X00\n        * domain_hostname:\n            use valid SVCToolname.EX: xxx\n        * environment:\n            use environment like Development, Homologation and Production.\n        &lt;br/>&lt;br/>\"\"\"</span>\n        args <span class=\"token operator\">=</span> parsetoken<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">]</span>\n        Environment <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>trigram<span class=\"token punctuation\">,</span> domain_name<span class=\"token punctuation\">)</span>\n        token_info <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_token_info<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n        cloud_res <span class=\"token operator\">=</span> check_cloud_permission<span class=\"token punctuation\">(</span>token_info<span class=\"token punctuation\">[</span><span class=\"token string\">'login_ad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Exception for E2S: verify the E2S in AD group list and proceed for ansible playbook run  \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> tri_search<span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            csv_res <span class=\"token operator\">=</span> check_csvfile<span class=\"token punctuation\">(</span>domain_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cloud_res<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> csv_res<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"trigram not added to AD group list/No such Domain in inventory\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Verify hostname \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hostname<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".socgen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"hostname invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> InvalidUsage<span class=\"token punctuation\">(</span><span class=\"token string\">\"hostname invalid. Use FQDN ex: xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>find_command <span class=\"token keyword\">import</span> find_command\n        task <span class=\"token operator\">=</span>find_command<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>\n            kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            expires<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>minutes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returning task\"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>app_file <span class=\"token keyword\">import</span> redis_cache\n        redis_cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>\n                 correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> response_message<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> details<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'trigram'</span><span class=\"token punctuation\">:</span> trigram<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Domain_name'</span><span class=\"token punctuation\">:</span> domain_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Environment'</span><span class=\"token punctuation\">:</span> Environment<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'uuid'</span><span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">,</span>\n                                              response_message<span class=\"token operator\">=</span><span class=\"token string\">\"Something wrong went.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Something went wrong. Please try it again\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_is_action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Get the input to find which IS will be operated\"\"\"</span>\n        parser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_token_info</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token triple-quoted-string string\">\"\"\" Return informations from a given token \"\"\"</span>\n        token_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login_ad\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>login_ad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"mail\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"expired\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>is_expired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> token_info\n\n<span class=\"token comment\">#Start/Stop IS</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/trigrams/&lt;trigram>/domains/&lt;domain_name>/integration-services/&lt;IS_name>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain host name.Give SVCToolname ex: xxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your application environment ex: Development, Homologation, Production'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>security<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'oauth2_implicit'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'itaas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'openid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">put_Instance</span><span class=\"token punctuation\">(</span>DecoratedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Start/Stop your IS\"\"\"</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"This function will start/stop your service.\\n\\r\"</span>\n                               <span class=\"token string\">\"Please input your respective information according to token.\\n\\r\"</span>\n                               <span class=\"token string\">\"This part should be changed with IAMaaS in the future.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Valid uuid created for task\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid Usage - OAuth2.0 Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No Such Service\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Please verify the domain or contact ETL adm for update the domain list into api\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>expect</span><span class=\"token punctuation\">(</span>instance_schema_in<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">,</span> domain_name<span class=\"token punctuation\">,</span> IS_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Start/Stop IS.\n        This endpoint start/stop Infrastructure Service(IS) present in server.\n        Endpoint will return according to your token and your account.&lt;br/>&lt;br/>\n        ***The information need for json in the request:***\n        * trigram[required]:\n            your application trigram.Ex: MAE\n        * IS name[required]:\n            IS name to be start/stop. Ex: INT_MAE_D01\n        * domain_name:\n            domain present in requested server.Ex: AAA_XXX_X00\n        * domain_hostname:\n            use valid SVCToolname.EX: xxx\n        * environment:\n            use environment like Development, Homologation and Production.\n        \"\"\"</span>\n        args <span class=\"token operator\">=</span> parsetoken<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># IS_name = args['IS_name'].upper()</span>\n        hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">]</span>\n        Environment <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        action <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>parse_is_action<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'START'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'STOP'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n                                            response_message<span class=\"token operator\">=</span><span class=\"token string\">\"Action not specified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">'No such action'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n\n        token_info <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_token_info<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n        cloud_res <span class=\"token operator\">=</span> check_cloud_permission<span class=\"token punctuation\">(</span>token_info<span class=\"token punctuation\">[</span><span class=\"token string\">'login_ad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token triple-quoted-string string\">\"\"\" Exception for E2S: verify the E2S in AD group list and proceed for ansible playbook run  \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> tri_search<span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            csv_res <span class=\"token operator\">=</span> check_csvfile<span class=\"token punctuation\">(</span>domain_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cloud_res<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> csv_res<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"trigram not added to AD group list/No such Domain in inventory\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token triple-quoted-string string\">\"\"\" Verify hostname \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hostname<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".socgen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"hostname invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> InvalidUsage<span class=\"token punctuation\">(</span><span class=\"token string\">\"hostname invalid. Use FQDN ex: xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>find_command_IS <span class=\"token keyword\">import</span> find_command_IS\n        task <span class=\"token operator\">=</span>find_command_IS<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>\n            kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">[</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'IS_name'</span><span class=\"token punctuation\">:</span> IS_name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            expires<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>minutes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>app_file <span class=\"token keyword\">import</span> redis_cache\n        redis_cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>\n               DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> response_message<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                              details<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'trigram'</span><span class=\"token punctuation\">:</span> trigram<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Domain_name'</span><span class=\"token punctuation\">:</span> domain_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Environment'</span><span class=\"token punctuation\">:</span> Environment<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'IS_name'</span><span class=\"token punctuation\">:</span> IS_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'action'</span><span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'uuid'</span><span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"Something wrong went.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Something went wrong. Please try it again\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_is_action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Get the input to find which IS will be operated\"\"\"</span>\n        parser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_token_info</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token triple-quoted-string string\">\"\"\" Return informations from a given token \"\"\"</span>\n        token_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login_ad\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>login_ad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"mail\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"expired\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>is_expired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> token_info\n\n<span class=\"token comment\">#list repository present in server</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/trigrams/&lt;trigram>/sessions/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain host name.Give SVCToolname ex: xxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain name. ex: AAA_XXX_X00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Your enviornment. ex: Development, Homologation, Production'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#@namespace.param('Repository_name', 'repository name to see list ex: XXX_XXX_X01', required=True)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>security<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'oauth2_implicit'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'itaas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'openid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">kill_instance_list</span><span class=\"token punctuation\">(</span>DecoratedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"List Repository connections\"\"\"</span>\n\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"This function will show repository in server.\\n\\r\"</span>\n                               <span class=\"token string\">\"Please input your respective information according to token.\\n\\r\"</span>\n                               <span class=\"token string\">\"This part should be changed with IAMaaS in the future.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># @namespace.param('Domain name', 'your domain ex: AAA_XXX_X00')</span>\n    <span class=\"token comment\"># @namespace.param('Port', 'your host port', optional=True)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid Usage - OAuth2.0 Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No Such Service\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Please verify the domain or contact ETL adm for update the domain list into api\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"get repository present in hostname.\n        This endpoint returns repository present in server.\n        Endpoint will return according to your token and your account.\n        ***The information need for json in the request:***\n        * trigram[required]:\n            your application trigram.Ex: MAE\n        * domain_name:\n            domain present in requested server.Ex: AAA_XXX_X00\n        * domain_hostname:\n            use valid SVCToolname.EX: xxx\n        * environment:\n            use environment like Development, Homologation and Production.\n        &lt;br/>&lt;br/>\"\"\"</span>\n        args <span class=\"token operator\">=</span> parsetoken<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">]</span>\n        domain_name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">]</span>\n        Environment <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">#repo_name = args['Repository_name'].upper()</span>\n        <span class=\"token comment\"># print(repo_name)</span>\n        token_info <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_token_info<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># cloud_res = check_cloud_permission('A000000')</span>\n        cloud_res <span class=\"token operator\">=</span> check_cloud_permission<span class=\"token punctuation\">(</span>token_info<span class=\"token punctuation\">[</span><span class=\"token string\">'login_ad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token triple-quoted-string string\">\"\"\" Exception for E2S: verify the E2S in AD group list and proceed for ansible playbook run  \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> tri_search<span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            csv_res <span class=\"token operator\">=</span> check_csvfile<span class=\"token punctuation\">(</span>domain_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cloud_res<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> csv_res<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"trigram not added to AD group list/No such Domain in inventory\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Verify hostname \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hostname<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".socgen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"hostname invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> InvalidUsage<span class=\"token punctuation\">(</span><span class=\"token string\">\"hostname invalid. Use FQDN ex: xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>list_repository <span class=\"token keyword\">import</span> list_repository\n        task <span class=\"token operator\">=</span>list_repository<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>\n            kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            expires<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>minutes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print(\"setting up redis cache\")</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>app_file <span class=\"token keyword\">import</span> redis_cache\n        redis_cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>\n                DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> response_message<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                               details<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'trigram'</span><span class=\"token punctuation\">:</span> trigram<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Domain_name'</span><span class=\"token punctuation\">:</span> domain_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Environment'</span><span class=\"token punctuation\">:</span> Environment<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'uuid'</span><span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"Something wrong went\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Something went wrong. Please try it again\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_is_action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Get the input to find which IS will be operated\"\"\"</span>\n        parser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_token_info</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return informations from a given token \"\"\"</span>\n        token_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login_ad\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>login_ad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"mail\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"expired\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>is_expired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> token_info\n\n<span class=\"token comment\">#List repository connection</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/trigrams/&lt;trigram>/sessions/&lt;repo_name>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain host name.Give SVCToolname ex: xxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain name. ex: AAA_XXX_X00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Your enviornment. ex: Development, Homologation, Production'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#@namespace.param('Repository_name', 'repository name to see list ex: XXX_XXX_X01', required=True)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>security<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'oauth2_implicit'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'itaas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'openid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">repository_list</span><span class=\"token punctuation\">(</span>DecoratedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"List Repository connections\"\"\"</span>\n\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"This function will show repository connections list.\\n\\r\"</span>\n                               <span class=\"token string\">\"Please input your respective information according to token.\\n\\r\"</span>\n                               <span class=\"token string\">\"This part should be changed with IAMaaS in the future.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># @namespace.param('Domain name', 'your domain ex: AAA_XXX_X00')</span>\n    <span class=\"token comment\"># @namespace.param('Port', 'your host port', optional=True)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid Usage - OAuth2.0 Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No Such Service\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Please verify the domain or contact ETL adm for update the domain list into api\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">,</span> repo_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"get your repository connections list.\n        This endpoint returns repository connections available to specific repository in server.\n        Endpoint will return according to your token and your account.\n        ***The information need for json in the request:***\n        * trigram[required]:\n            your application trigram.Ex: MAE\n        * repo name[required]:\n            repository name to be listed. Ex: REP_MAE_D01\n        * domain_name:\n            domain present in requested server.Ex: AAA_XXX_X00\n        * domain_hostname:\n            use valid SVCToolname.EX: xxx\n        * environment:\n            use environment like Development, Homologation and Production.\n        &lt;br/>&lt;br/>\"\"\"</span>\n        args <span class=\"token operator\">=</span> parsetoken<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">]</span>\n        domain_name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">]</span>\n        Environment <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> domain_name<span class=\"token punctuation\">,</span> Environment<span class=\"token punctuation\">,</span> repo_name<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#repo_name = args['Repository_name'].upper()</span>\n        <span class=\"token comment\"># print(repo_name)</span>\n        token_info <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_token_info<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># cloud_res = check_cloud_permission('A000000')</span>\n        cloud_res <span class=\"token operator\">=</span> check_cloud_permission<span class=\"token punctuation\">(</span>token_info<span class=\"token punctuation\">[</span><span class=\"token string\">'login_ad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token triple-quoted-string string\">\"\"\" Exception for E2S: verify the E2S in AD group list and proceed for ansible playbook run  \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> tri_search<span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            csv_res <span class=\"token operator\">=</span> check_csvfile<span class=\"token punctuation\">(</span>domain_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cloud_res<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> csv_res<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"trigram not added to AD group list/No such Domain in inventory\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Verify hostname \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hostname<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".socgen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"hostname invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> InvalidUsage<span class=\"token punctuation\">(</span><span class=\"token string\">\"hostname invalid. Use FQDN ex: xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>list_repository <span class=\"token keyword\">import</span> list_repo_connection\n        task <span class=\"token operator\">=</span>list_repo_connection<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>\n                                      kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                                              <span class=\"token string\">'repo_name'</span><span class=\"token punctuation\">:</span> repo_name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                      expires<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>minutes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>app_file <span class=\"token keyword\">import</span> redis_cache\n        redis_cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>\n                DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> response_message<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                               details<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'trigram'</span><span class=\"token punctuation\">:</span> trigram<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Domain_name'</span><span class=\"token punctuation\">:</span> domain_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Environment'</span><span class=\"token punctuation\">:</span> Environment<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'repository_name'</span><span class=\"token punctuation\">:</span> repo_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'uuid'</span><span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">,</span>\n                                            response_message<span class=\"token operator\">=</span><span class=\"token string\">\"Something wrong went.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Something went wrong. Please try it again\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_is_action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Get the input to find which IS will be operated\"\"\"</span>\n        parser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_token_info</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return informations from a given token \"\"\"</span>\n        token_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login_ad\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>login_ad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"mail\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"expired\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>is_expired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> token_info\n\n<span class=\"token comment\">#Killsession using username</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/trigrams/&lt;trigram>/sessions/&lt;username>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain host name.Give SVCToolname ex: xxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain name. ex: AAA_XXX_X00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Your enviornment. ex: Development, Homologation, Production'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Repository_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'repository name to see list ex: XXX_XXX_X01'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>security<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'oauth2_implicit'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'itaas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'openid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">kill_instance_user</span><span class=\"token punctuation\">(</span>DecoratedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" Run user session using Username\"\"\"</span>\n\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"This function will kill user session using username.\\n\\r\"</span>\n                               <span class=\"token string\">\"Please input your respective information according to token.\\n\\r\"</span>\n                               <span class=\"token string\">\"This part should be changed with IAMaaS in the future.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># @namespace.param('Username', 'user name to kill session ex: userID', required=True)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid Usage - OAuth2.0 Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No Such Service\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Please verify the domain or contact ETL adm for update the domain list into api\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Kill session using Username.\n        This endpoint will kill user session of specific user using username.\n        Endpoint will return according to your token and your account.\n        ***The information need for json in the request:***\n        * trigram[required]:\n            your application trigram.Ex: MAE\n        * username[required]:\n            specific username to kill session. Ex: userID.\n        * repo name[required]:\n            repository name in server. Ex: REP_MAE_D01\n        * domain_name:\n            domain present in requested server.Ex: AAA_XXX_X00\n        * domain_hostname:\n            use valid SVCToolname.EX: xxx\n        * environment:\n            use environment like Development, Homologation and Production.\n        &lt;br/>&lt;br/>\"\"\"</span>\n        args <span class=\"token operator\">=</span> parsetoken<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">]</span>\n        domain_name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">]</span>\n        repo_name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Repository_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        Environment <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span>\n        token_info <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_token_info<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n        cloud_res <span class=\"token operator\">=</span> check_cloud_permission<span class=\"token punctuation\">(</span>token_info<span class=\"token punctuation\">[</span><span class=\"token string\">'login_ad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Exception for E2S: verify the E2S in AD group list and proceed for ansible playbook run  \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> tri_search<span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            csv_res <span class=\"token operator\">=</span> check_csvfile<span class=\"token punctuation\">(</span>domain_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cloud_res<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> csv_res<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"trigram not added to AD group list/No such Domain in inventory\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Verify hostname \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hostname<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".socgen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"hostname invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> InvalidUsage<span class=\"token punctuation\">(</span><span class=\"token string\">\"hostname invalid. Use FQDN ex: xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>kill_session <span class=\"token keyword\">import</span> kill_session_user\n        task <span class=\"token operator\">=</span> kill_session_user<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>\n            kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'repo_name'</span><span class=\"token punctuation\">:</span> repo_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            expires<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>minutes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setting up redis cache\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>app_file <span class=\"token keyword\">import</span> redis_cache\n        redis_cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>\n                DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> response_message<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                               details<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'trigram'</span><span class=\"token punctuation\">:</span> trigram<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Domain_name'</span><span class=\"token punctuation\">:</span> domain_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Environment'</span><span class=\"token punctuation\">:</span> Environment<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'repository_name'</span><span class=\"token punctuation\">:</span> repo_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'uuid'</span><span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"Something wrong went.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Something went wrong. Please try it again\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_is_action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Get the input to find which IS will be operated\"\"\"</span>\n        parser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_token_info</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return informations from a given token \"\"\"</span>\n        token_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login_ad\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>login_ad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"mail\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"expired\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>is_expired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> token_info\n\n<span class=\"token comment\">#Killsession using sessionID</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/trigrams/&lt;trigram>/sessions/&lt;sessionID>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain host name.Give SVCToolname ex: xxx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'your domain name. ex: AAA_XXX_X00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Your enviornment. ex: Development, Homologation, Production'</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Repository_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'repository name to see list ex: XXX_XXX_X01'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>security<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'oauth2_implicit'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'itaas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'openid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">kill_instance_session</span><span class=\"token punctuation\">(</span>DecoratedResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" Kill user session using session ID \"\"\"</span>\n\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>doc</span><span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">\"This function will kill user session using sessionID.\\n\\r\"</span>\n                               <span class=\"token string\">\"Please input your respective information according to token.\\n\\r\"</span>\n                               <span class=\"token string\">\"This part should be changed with IAMaaS in the future.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid Usage - OAuth2.0 Failed\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No Such Service\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator annotation punctuation\">@namespace<span class=\"token punctuation\">.</span>response</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Please verify the domain or contact ETL adm for update the domain list into api\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">,</span> sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Kill session using session ID.\n        This endpoint will kill session using sessionID.\n        Endpoint will return according to your token and your account.\n        ***The information need for json in the request:***\n        * trigram[required]:\n            your application trigram.Ex: MAE\n        * sessionID[required]:\n            specific session identified by sessionID to kill. it should be digit.Ex: 4326.\n        * repo name[required]:\n            repository name in server. Ex: REP_MAE_D01\n        * domain_name:\n            domain present in requested server.Ex: AAA_XXX_X00\n        * domain_hostname:\n            use valid SVCToolname.EX: xxx\n        * environment:\n            use environment like Development, Homologation and Production.\n        &lt;br/>&lt;br/>\"\"\"</span>\n        args <span class=\"token operator\">=</span> parsetoken<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        hostname <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">]</span>\n        domain_name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">]</span>\n        Environment <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span>\n        repo_name <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Repository_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#sessionID = args['SessionID']</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> sessionID<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"sessionID is not valid. try listing session to get valid sessionID\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">403</span><span class=\"token punctuation\">)</span>\n        token_info <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_token_info<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n        cloud_res <span class=\"token operator\">=</span> check_cloud_permission<span class=\"token punctuation\">(</span>token_info<span class=\"token punctuation\">[</span><span class=\"token string\">'login_ad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token triple-quoted-string string\">\"\"\" Exception for E2S: verify the E2S in AD group list and proceed for ansible playbook run  \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> tri_search<span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            csv_res <span class=\"token operator\">=</span> check_csvfile<span class=\"token punctuation\">(</span>domain_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cloud_res<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> csv_res<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> NoSuchResource<span class=\"token punctuation\">(</span><span class=\"token string\">\"trigram not added to AD group list/No such Domain in inventory\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Verify hostname \"\"\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> hostname<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\".socgen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"hostname invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> InvalidUsage<span class=\"token punctuation\">(</span><span class=\"token string\">\"hostname invalid. Use FQDN ex: xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span>kill_session <span class=\"token keyword\">import</span> run_killsession_sessionID\n        task <span class=\"token operator\">=</span>run_killsession_sessionID<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>\n            kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'repo_name'</span><span class=\"token punctuation\">:</span> repo_name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'sessionID'</span><span class=\"token punctuation\">:</span> sessionID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            expires<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>minutes<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>app_file <span class=\"token keyword\">import</span> redis_cache\n        redis_cache<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span>\n                DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">202</span><span class=\"token punctuation\">,</span> response_message<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n                               details<span class=\"token operator\">=</span>task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'hostname'</span><span class=\"token punctuation\">:</span> hostname<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'trigram'</span><span class=\"token punctuation\">:</span> trigram<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Domain_name'</span><span class=\"token punctuation\">:</span> domain_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'Environment'</span><span class=\"token punctuation\">:</span> Environment<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'repository_name'</span><span class=\"token punctuation\">:</span> repo_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'sessionID'</span><span class=\"token punctuation\">:</span> sessionID<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'uuid'</span><span class=\"token punctuation\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">202</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            g<span class=\"token punctuation\">.</span>dl_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>DatalakeRecord<span class=\"token punctuation\">(</span>correlation_id<span class=\"token punctuation\">,</span> event<span class=\"token operator\">=</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> response_http_code<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">,</span>\n                                             response_message<span class=\"token operator\">=</span><span class=\"token string\">\"Something wrong went.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Something went wrong. Please try it again\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">402</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_is_action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Get the input to find which IS will be operated\"\"\"</span>\n        parser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_token_info</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Return informations from a given token \"\"\"</span>\n        token_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login_ad\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>login_ad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"mail\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">\"expired\"</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>is_expired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> token_info\n\n<span class=\"token triple-quoted-string string\">\"\"\" tri_search() function returns True only when\ntrigram entered in API is in ADGroup list of client id.\ninput: cloud_res, trigram\noutput: True/False\"\"\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tri_search</span><span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">,</span> trigram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cloud_res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> cloud_res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> trigram<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">parsetoken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Function : simulate the response from account as a service\n    :param application: your [TRI]+[IRT]\n    :param region: your region(zone )\n    :param environment: your [TRI]+[IRT]\n    :return: a dict contains the account information\n    \"\"\"</span>\n    parser <span class=\"token operator\">=</span> reqparse<span class=\"token punctuation\">.</span>RequestParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"application\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"region\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'Environment'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'IS_name'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'Domain Host name'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'Domain name'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'Repository_name'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'SessionID'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Swagger SG</h2>\n<p>API doit etre conform au norm API chez Societe Generale</p>\n<p>on s'installe le swagger submodule de la SG</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> submodule <span class=\"token function\">add</span> -b templates https://xxxxxx/BeAPI/sg-swagger-ui.git swagger</code></pre></div>\n<p>client id doit etre creer manuellement via SG API market, en suite, on aura client name avec le client id:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SWAGGER_UI_OAUTH_REALM</span><span class=\"token operator\">=</span><span class=\"token string\">'/'</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SWAGGER_UI_OAUTH_APP_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">'itaas'</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SWAGGER_UI_OAUTH_CLIENT_ID</span><span class=\"token operator\">=</span><span class=\"token string\">'xxxxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'</span></code></pre></div>\n<h2>RUN</h2>\n<p>Cette application utilise le user generique afin de deployer l'API, assure que les variables environnement sont bien rempli sur <code class=\"language-text\">dev-env.sh</code> ou <code class=\"language-text\">prd-env.sh</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"identification\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gunicorn manage:app -c config/gunicorn_conf.py --timeout <span class=\"token number\">350</span> --certfile<span class=\"token operator\">=</span>ssl/xxx.crt --keyfile<span class=\"token operator\">=</span>ssl/xxx.key <span class=\"token operator\">&amp;</span></code></pre></div>\n<p>pour lancer le celery worker:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">celery flower -A app.celery worker1 --concurrency<span class=\"token operator\">=</span><span class=\"token number\">2</span> --loglevel<span class=\"token operator\">=</span>INFO --port<span class=\"token operator\">=</span><span class=\"token number\">5555</span> <span class=\"token operator\">&amp;</span></code></pre></div>\n<h2>DEPLOY</h2>\n<p>On a utilise secrets service in kubernetes pour la partie SSL et les variables environnements.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl create -f /code/ETLaaS_GCR_async/kube/secret-env.yml --namespace ns-xxx-xxxxx-dev-ssa</code></pre></div>\n<p>Docker local:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">celery_worker</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> etlaas<span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">{</span>BUILD_NUMBER<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> redis<span class=\"token punctuation\">-</span>master\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> bash <span class=\"token punctuation\">-</span>c \"./celery_start.sh; sleep 2; tail <span class=\"token punctuation\">-</span>f /code/ETLaaS_GCR_async/error.log\"\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> network<span class=\"token punctuation\">-</span>l7<span class=\"token punctuation\">-</span>e2s<span class=\"token punctuation\">-</span>dev\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">'com.docker.ucp.access.label=/Run/xxxx'</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">'com.docker.ucp.access.owner=xxxx'</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DNSNAME=xxxx\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> run/dev<span class=\"token punctuation\">-</span>env.sh\n    <span class=\"token key atrule\">secrets</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> xxxx.crt\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> xxxx.crt\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> xxxx.key\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> xxxx.key\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> e2s_vault_write_token\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> e2s_vault_write_token\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> e2s<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>write<span class=\"token punctuation\">-</span>consul<span class=\"token punctuation\">-</span>ACL\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> e2s<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>write<span class=\"token punctuation\">-</span>consul<span class=\"token punctuation\">-</span>ACL\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> LDAP_LOGIN\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> LDAP_LOGIN\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> LDAP_PASSWORD\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> LDAP_PASSWORD\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> private_key\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> private_key\n        <span class=\"token key atrule\">uid</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1000'</span>\n        <span class=\"token key atrule\">gid</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1000'</span>\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0600</span>\n\n  <span class=\"token key atrule\">api</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> etlaas<span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">{</span>BUILD_NUMBER<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> redis<span class=\"token punctuation\">-</span>master\n      <span class=\"token punctuation\">-</span> celery_worker\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> bash <span class=\"token punctuation\">-</span>c \"./startup.sh; sleep 3; tail <span class=\"token punctuation\">-</span>f /code/ETLaaS_GCR_async/error.log\"\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> network<span class=\"token punctuation\">-</span>l7<span class=\"token punctuation\">-</span>e2s<span class=\"token punctuation\">-</span>dev\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">'com.docker.ucp.access.label=/Run/xxxx'</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">'com.docker.ucp.access.owner=xxxx'</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DNSNAME=etlaas<span class=\"token punctuation\">-</span>gcr\n\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> run/dev<span class=\"token punctuation\">-</span>env.sh\n    <span class=\"token key atrule\">secrets</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> xxxx.crt\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> xxxx.crt\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> xxxx.key\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> xxxx.key\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> e2s_vault_write_token\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> e2s_vault_write_token\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> e2s<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>write<span class=\"token punctuation\">-</span>consul<span class=\"token punctuation\">-</span>ACL\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> e2s<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>write<span class=\"token punctuation\">-</span>consul<span class=\"token punctuation\">-</span>ACL\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> LDAP_LOGIN\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> LDAP_LOGIN\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> LDAP_PASSWORD\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> LDAP_PASSWORD\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0777</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> private_key\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> private_key\n        <span class=\"token key atrule\">uid</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1000'</span>\n        <span class=\"token key atrule\">gid</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1000'</span>\n        <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0600</span>\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">network-l7-e2s-dev</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">secrets</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">xxxx.crt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">xxxx.key</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">e2s_vault_write_token</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">e2s-dev-write-consul-ACL</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">LDAP_LOGIN</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">LDAP_PASSWORD</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">private_key</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Kubernetes:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#kube-deploy.sh</span>\n<span class=\"token comment\">#redis deployment</span>\n./kubectl create -f kube/redis/redis-deployment.yml --namespace ns-xxx-dev-ssa\n<span class=\"token comment\">#redis service</span>\n./kubectl create -f kube/redis/redis-svc.yml --namespace ns-xxx-dev-ssa\n<span class=\"token comment\">#celery deployment</span>\n./kubectl create -f kube/redis/celery-deployment.yml --namespace ns-xxx-dev-ssa\n<span class=\"token comment\">#celery service</span>\n./kubectl create -f kube/redis/celery-svc.yml --namespace ns-xxx-dev-ssa\n<span class=\"token comment\">#application deployment</span>\n./kubectl create -f kube/etlaas-deployment.yml --namespace ns-xxx-dev-ssa\n<span class=\"token comment\">#application service</span>\n./kubectl create -f kube/etlaas-svc.yml --namespace ns-xxx-dev-ssa\n<span class=\"token comment\">#application ingress</span>\n./kubectl create -f kube/etlaas-ingress.yml --namespace ns-xxx-dev-ssa</code></pre></div>\n<h1>CICD</h1>\n<p>Pour la partie CICD, l'implementation de scripts Jenkinsfile sur Jenkins Instance avec le webhook de pull-resquest sur le repository</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\">// Jenkinfile</span>\n<span class=\"token function\">dockerNode</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">:</span> <span class=\"token string\">'maven-ezweb-builder:3.3.9-jdk-1.8.0.121-node-9.5.0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//Environment properties to build and releae application modules</span>\n<span class=\"token function\">withEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'DOCKER_HOST=tcp://xxx:443'</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">'UCP_URL=https://xxx'</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token string\">'DOCKER_TLS_VERIFY=1'</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token string\">'DOCKER_CERT_PATH=/home/jenkins'</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token string\">'UCP_credentialsId=UCP_Credentials'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">//Credentials to connect with docker services</span>\n<span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">$</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'UsernamePasswordMultiBinding'</span><span class=\"token punctuation\">,</span>\n\t\tcredentialsId<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"<span class=\"token expression\"><span class=\"token punctuation\">$</span>UCP_credentialsId</span>\"</span><span class=\"token punctuation\">,</span>\n\t\tusernameVariable<span class=\"token punctuation\">:</span> <span class=\"token string\">'USER'</span><span class=\"token punctuation\">,</span>\n\t\tpasswordVariable<span class=\"token punctuation\">:</span> <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span>credentialsId<span class=\"token punctuation\">:</span> <span class=\"token string\">'e2s_dev_svc-kube.yml'</span><span class=\"token punctuation\">,</span> variable<span class=\"token punctuation\">:</span> <span class=\"token string\">'KUBECONFIG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//fetching ucp certs for deployments</span>\n\tsh <span class=\"token string\">'''AUTHTOKEN=$(curl -sk -d \"{\\\\\"username\\\\\":\\\\\"$USER\\\\\",\\\\\"password\\\\\":\\\\\"$PASSWORD\\\\\"}\" $UCP_URL/auth/login | jq -r .auth_token)\n    \tcurl -k -H \"Authorization: Bearer $AUTHTOKEN\" $UCP_URL/api/clientbundle -o $HOME/bundle.zip\n    \tunzip -o $HOME/bundle.zip -d $HOME'''</span>\n    \tsh <span class=\"token string\">'docker login --username=$USER  --password=$PASSWORD https://xxxx/'</span>\n\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GIT-CLONE'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \tgit changelog<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://xxx/GTS-PAS-MDW-APP/ETLaaS_GCR_async.git'</span>\n\t\t  env<span class=\"token punctuation\">.</span>GIT_COMMIT <span class=\"token operator\">=</span> <span class=\"token function\">sh</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">:</span> <span class=\"token string gstring\">\"git rev-parse HEAD\"</span><span class=\"token punctuation\">,</span> returnStdout<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BUILD_IMAGE'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sh <span class=\"token string gstring\">\"\"\"docker build -f dockers/ETLaaS_async/Dockerfile --tag etlaas:etlaas-kube --force-rm --no-cache .; docker push etlaas:etlaas-kube\"\"\"</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'KUBECTL'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sh <span class=\"token string gstring\">\"\"\"curl -k -L http://xxxx/eservices/sources/docker-client/kubectl-1.8.zip -o /home/jenkins/.jenkins/workspace/kube_etl/kubectl.zip &amp;&amp; unzip -o /home/jenkins/.jenkins/workspace/kube_etl/kubectl.zip &amp;&amp; chmod +x ./kubectl\"\"\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'KUBE_DEPLOY'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sh <span class=\"token string\">'''sh kube/kube-deploy.sh '''</span>\n<span class=\"token punctuation\">}</span>\n\t\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"CRUD Api Swagger Informatica","description":"Api for Informatica's Admin","date":"2020-04-21T00:00:00.000Z","slug":"/pensieve/api-informatica","tags":["API","Oauth2"]}}},"pageContext":{}},"staticQueryHashes":["1994492073","2009693873","2031412112","3825832676"]}